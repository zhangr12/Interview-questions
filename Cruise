// in: 5 7 8 9 // increasing order
// out: 25 49 64 81 // increasing order, squares of inputs
// goal: generate output
// hint: "int"
// 2^31, -2^31+1

// in: -9 5 7 8 9
// out:  25 49 64 81 81
// goal: find a solution O(N)


// let i be the pointer points to the first positive number
// then all the numbers on the right of i they are positive
// all the numbers on the left of i they are negative
// use j points to the last negative number

//     j i
// -9 -5 1 5 7 8 9+
// call the input A
// compare the absolute value of A[i] and A[j]
// if abs(A[i]) <= abs(A[j])
// push A[i]*A[i] into the result vector
// increasing i
// otherwise, we do same thing to j, and we decreasing j
// j >= 0 and i < n (n = A.size())

#include <iostream>
#include <vector>
using namespace std;

vector<int> increasingSquare(const vector<int> &A){
  int n = A.size();
  if(n == 0) return {};
  vector<int> res(n, 0);
  
  // find first positve number
  int i = 0;
  while(i < A.size() && A[i] < 0) i++;
  // now i points to first postive number
  int j = i-1;
  // index of res
  for(int crt = 0; crt < n; crt++){
    if(j < 0){
      res[crt] = A[i]*A[i];
      i++;
    }
    else if(i >= n){
      res[crt] = A[j]*A[j];
      j--;
    }
    else{
      if(A[i] < abs(A[j])){
        res[crt] = A[i]*A[i];
        i++;
      }
      else{
        res[crt] = A[j]*A[j];
        j--;
      }
    }
  }
  return res;
}

int main(){
  vector<int> A{-10, -5, -1, 0, 1, 3, 9};
  
  vector<int> res = increasingSquare(A);
  
  for(int i = 0; i < A.size(); i++){
    cout << res[i] << endl;
  }
  return 0;
}


