// shared pointer
#include <iostream>

using namespace std;

class People{
private:
	string m_name;
	int m_age;
public:
	People(): m_name(""), m_age(0){
		cout << "Default people constructor..." << endl;
	}
	
	People(string name, int age){
		m_name = name;
		m_age = age;
		cout << "Normal people constructor..." << endl;
	}
	
  void Display(){
    cout << m_name << " " << m_age << endl;
  }

	~People(){
		cout << "People destructor..." << endl;
	}
};


class RC{
private:
	int count;
public:
	RC(): count(0){}
	void Add(){
		++count;
	}
	void Minus(){
		--count;
	}
	int getNum(){
		return count;
	}
};


template<class T>
class SP{
private:
	T *m_t;
	RC *m_reference;
public:
	// default constructor
	SP(){
		m_t = 0;
		m_reference = new RC();
		cout << "Shared pointer default constructor..." << endl;
	}
	// normal constructor
  // here we use pointer but not reference because new operator returns a pointer
	SP(T *t){
		cout << "Normal constructor(pointer)..." << endl;
		m_t = t;
		m_reference = new RC();
		m_reference->Add();
	}
	// copy constructor
	SP(const SP<T> &P){
		cout << "Copy constructor..." << endl;
		m_t = P.m_t;
		m_reference = P.m_reference;
		m_reference->Add();
	}
	// assignment operator
	SP<T>& operator=(const SP<T> &P){
		cout << "assignment operator..." << endl;
		if(this != &P){
			m_reference->Minus();
			if(m_reference->getNum() <= 0 && m_t){
				delete m_t;
				delete m_reference;
			}
			m_t = P.m_t;
			m_reference = P.m_reference;
			m_reference->Add();
		}
		else{
			cout << "Cannot assign a pointer to itself..." << endl;
		}
		return *this;
	}
	// dereference
	T& operator*(){
		return *m_t;
	}
	// indirection
	T* operator->(){
		return m_t;
	}
	~SP(){
		cout << m_reference->getNum() << endl;
		m_reference->Minus();
		cout << m_reference->getNum() << endl;
		if(m_reference->getNum() <= 0){
			cout << "Delete object..." << endl;
			delete m_t;
			delete m_reference;
		}
	}
};

int main(){
	SP<People> p1;
	{
		cout << "enter scope..." << endl;
		SP<People> p2(new People("John", 23));
		p2->Display();
		p1=  p2;
		cout << "out of scope..." << endl;
	}
	
	p1->Display();

  return 0;
}



