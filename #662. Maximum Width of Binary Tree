/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        return BFS(root);
    }
    
    // level order traversal with modified level elements
    int BFS(TreeNode* root){
        if(!root) return 0;
        vector<TreeNode*> *crt_level, *nxt_level, crt, nxt;
        crt.push_back(root);
        crt_level = &crt;
        nxt_level = &nxt;
        int res = 0, l = 0, r = 0;
        while(l <= r){
            res = max(res, r-l+1);
            for(int i = l; i <= r; i++){
                if((*crt_level)[i] == NULL){
                    nxt_level->push_back(NULL);
                    nxt_level->push_back(NULL);
                }
                else{
                    nxt_level->push_back((*crt_level)[i]->left);
                    nxt_level->push_back((*crt_level)[i]->right);
                }
            }
            // find the first non null element from left
            l = 0, r = nxt_level->size() - 1;
            while(l < nxt_level->size() && (*nxt_level)[l] == NULL) l++;
            while(r >= 0 && (*nxt_level)[r] == NULL) r--;
            swap(crt_level, nxt_level);
            *nxt_level = {};
        }
        return res;
    }
    
    
    
    
    
};
